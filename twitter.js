const fs = require("fs");
const Twit = require("twit");
const imageDownloader = require("image-downloader");
const twitterCredentials = require("./.credentials/twitter-credentials.json");

const twitterApi = new Twit({
	strictSSL: true,
	timeout_ms: 60 * 1000,
	consumer_key: twitterCredentials.apiKey,
	access_token: twitterCredentials.accessToken,
	consumer_secret: twitterCredentials.apiSecretKey,
	access_token_secret: twitterCredentials.accessTokenSecret
});

async function twitter(content) {
	await uploadImageToTwitter(content);
	const post = builderATweet(content);

	await writeTweet(post);

	function builderATweet(content) {
		const tweet = `
			- Face Recognition - Generated By Script
			1. Search Term: ${content.searchTerm}
			2. Keywords: ${content.keywords.join(" ")}
			3. Image Found/Used: ${content.face.imageLink}
			4. Estimated Age: between ${content.face.age.min} e ${content.face.age.max} anos
			#buildingatwitterbot #testingbot #facerecognition #nodejs #ibmcloud #googleimagesearch
		`;

		return {
			status: tweet,
			media_ids: content.face.imageToUpload
		};
	}

	async function uploadImageToTwitter(content) {
		const filePath = `images/${content.searchTerm}.png`;
		await donwloadImageFromURL(content.face.imageLink, filePath);
		const imageEncoded = fs.readFileSync(filePath, { encoding: "base64" });

		const { data } = await twitterApi.post("media/upload", {
			media_data: imageEncoded
		});

		content.face.imageToUpload = [data.media_id_string];

		function donwloadImageFromURL(imageLink, path) {
			return imageDownloader.image({
				url: imageLink,
				dest: path
			});
		}
	}

	async function writeTweet(tweetParams) {
		await twitterApi.post("statuses/update", tweetParams);
	}
}

module.exports = twitter;
